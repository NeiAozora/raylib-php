Implemented,Has ArgInfo,Function,Mapped Method,Implementation Comment,Function Comment
,,Window-related functions,,,
x,,"void InitWindow(int width, int height, const char *title);",raylib\Window::init(),,Initialize window and OpenGL context
x,,bool WindowShouldClose(void);,raylib\Window::shouldClose() : bool,,Check if KEY_ESCAPE pressed or Close icon pressed
x,,void CloseWindow(void);,raylib\Window::close(),,Close window and unload OpenGL context
x,,bool IsWindowReady(void);,raylib\Window::isReady() : bool,,Check if window has been initialized successfully
x,,bool IsWindowFullscreen(void);,raylib\Window::isWindowFullscreen(),,Check if window is currently fullscreen
x,,bool IsWindowHidden(void);,raylib\Window::isHidden() : bool,,Check if window is currently hidden (only PLATFORM_DESKTOP)
x,,bool IsWindowMinimized(void);,raylib\Window::isMinimized() : bool,,Check if window is currently minimized (only PLATFORM_DESKTOP)
x,,bool IsWindowMaximized(void);,raylib\Window::isMaximized() : bool,,Check if window is currently maximized (only PLATFORM_DESKTOP)
x,,bool IsWindowFocused(void);,raylib\Window::isFocused() : bool,,Check if window is currently focused (only PLATFORM_DESKTOP)
x,,bool IsWindowResized(void);,raylib\Window::isResized() : bool,,Check if window has been resized last frame
x,,bool IsWindowState(unsigned int flag);,raylib\Window::isState(int $flags) : bool,,Check if one specific window flag is enabled
x,,void SetWindowState(unsigned int flags);,raylib\Window::setState(int $flags),,Set window configuration state using flags
x,,void ClearWindowState(unsigned int flags);,raylib\Window::clearState(int $flags),,Clear window configuration state flags
x,,void ToggleFullscreen(void);,raylib\Window::toggleFullscreen(),,Toggle window state: fullscreen/windowed (only PLATFORM_DESKTOP)
x,,void MaximizeWindow(void);,raylib\Window::maximize(),,"Set window state: maximized, if resizable (only PLATFORM_DESKTOP)"
x,,void MinimizeWindow(void);,raylib\Window::minimize(),,"Set window state: minimized, if resizable (only PLATFORM_DESKTOP)"
x,,void RestoreWindow(void);,raylib\Window::restore(),,Set window state: not minimized/maximized (only PLATFORM_DESKTOP)
x,,void SetWindowIcon(Image image);,raylib\Window::setIcon(\raylib\Image $image),,Set icon for window (only PLATFORM_DESKTOP)
x,,void SetWindowTitle(const char *title);,raylib\Window::setTitle(string $title),,Set title for window (only PLATFORM_DESKTOP)
x,,"void SetWindowPosition(int x, int y);","raylib\Window::setPosition(int $x, int $y)",,Set window position on screen (only PLATFORM_DESKTOP)
x,,void SetWindowMonitor(int monitor);,raylib\Window::setMonitor(int $monitor),,Set monitor for the current window (fullscreen mode)
x,,"void SetWindowMinSize(int width, int height);","raylib\Window::setMinSize(int $width, int $height)",,Set window minimum dimensions (for FLAG_WINDOW_RESIZABLE)
x,,"void SetWindowSize(int width, int height);","raylib\Window::setSize(int $width, int $height)",,Set window dimensions
,,void *GetWindowHandle(void);,--,Cannot Implement,Get native window handle
x,,int GetScreenWidth(void);,raylib\Window::getScreenWidth() : int ,,Get current screen width
x,,int GetScreenHeight(void);,raylib\Window::getScreenHeight() : int ,,Get current screen height
x,,int GetMonitorCount(void);,raylib\Window::getMonitorCount() : int ,,Get number of connected monitors
x,,Vector2 GetMonitorPosition(int monitor);,raylib\Window::getMonitorPosition(int $monitor) : \raylib\Vector2,,Get specified monitor position
x,,int GetMonitorWidth(int monitor);,raylib\Window::getMonitorWidth(int $monitor) : int ,,Get specified monitor width
x,,int GetMonitorHeight(int monitor);,raylib\Window::getMonitorHeight(int $monitor) : int ,,Get specified monitor height
x,,int GetMonitorPhysicalWidth(int monitor);,raylib\Window::getMonitorPhysicalWidth(int $monitor) : int ,,Get specified monitor physical width in millimetres
x,,int GetMonitorPhysicalHeight(int monitor);,raylib\Window::getMonitorPhysicalHeight(int $monitor) : int ,,Get specified monitor physical height in millimetres
x,,int GetMonitorRefreshRate(int monitor);,raylib\Window::getMonitorRefreshRate(int $monitor) : int ,,Get specified monitor refresh rate
x,,Vector2 GetWindowPosition(void);,raylib\Window::getPosition() : \raylib\Vector2,,Get window position XY on monitor
x,,Vector2 GetWindowScaleDPI(void);,raylib\Window::getScaleDPI() : \raylib\Vector2,,Get window scale DPI factor
x,,const char *GetMonitorName(int monitor);,raylib\Window::getMonitorName(int $monitor) : string,,"Get the human-readable, UTF-8 encoded name of the primary monitor"
x,,void SetClipboardText(const char *text);,raylib\Window::setClipboardText(string $text),,Set clipboard text content
x,,const char *GetClipboardText(void);,raylib\Window::getClipboardText() : string,,Get clipboard text content
,,            ,,,
,,Cursor-related functions         ,,,
x,,void ShowCursor(void);,raylib\Cursor::show(),,Shows cursor
x,,void HideCursor(void);,raylib\Cursor::hide(),,Hides cursor
x,,bool IsCursorHidden(void);,raylib\Cursor::isHidden(),,Check if cursor is not visible
x,,void EnableCursor(void);,raylib\Cursor::enable(),,Enables cursor (unlock cursor)
x,,void DisableCursor(void);,raylib\Cursor::disable(),,Disables cursor (lock cursor)
x,,bool IsCursorOnScreen(void),raylin\Cursor::isOnScreen(),,Check if cursor is on the current screen.
,,            ,,,
,,Drawing-related functions            ,,,
,,void ClearBackground(Color color);,raylib\Draw::clearBackground(raylib\Color $color),,Set background color (framebuffer clear color)
,,void BeginDrawing(void);,raylib\Draw::begin(),,Setup canvas (framebuffer) to start drawing
,,void EndDrawing(void);,raylib\Draw::end(),,End canvas drawing and swap buffers (double buffering)
,,void BeginMode2D(Camera2D camera);,raylib\Draw::beginMode2d(raylib\Camera2D $camera2d),,Initialize 2D mode with custom camera (2D)
,,void EndMode2D(void);,raylib\Draw::endMode2d(),,Ends 2D mode with custom camera
,,void BeginMode3D(Camera3D camera);,raylib\Draw::beginMode3d(raylib\Camera3D camera3d),,Initializes 3D mode with custom camera (3D)
,,void EndMode3D(void);,raylib\Draw::endMode3d(),,Ends 3D mode and returns to default 2D orthographic mode
,,void BeginTextureMode(RenderTexture2D target);,raylib\RenderTexture->begin(),,Initializes render texture for drawing
,,void EndTextureMode(void);,raylib\RenderTexture->end(),,Ends drawing to render texture
,,"void BeginScissorMode(int x, int y, int width, int height);",raylib\Draw::beginScissorMode(),,Begin scissor mode (define screen area for following drawing)
,,void EndScissorMode(void);,raylib\Draw::endScissorMode(),,End scissor mode
,,,,,
,,Screen-space-related functions,,,
,,"Ray GetMouseRay(Vector2 mousePosition, Camera camera);",TODO,,Returns a ray trace from mouse position
,,Matrix GetCameraMatrix(Camera camera);,TODO,,Returns camera transform matrix (view matrix)
,,Matrix GetCameraMatrix2D(Camera2D camera);,TODO,,Returns camera 2d transform matrix
,,"Vector2 GetWorldToScreen(Vector3 position, Camera camera);",TODO,,Returns the screen space position for a 3d world space position
,,"Vector2 GetWorldToScreenEx(Vector3 position, Camera camera, int width, int height);",TODO,,Returns size position for a 3d world space position
,,"Vector2 GetWorldToScreen2D(Vector2 position, Camera2D camera);",TODO,,Returns the screen space position for a 2d camera world space position
,,"Vector2 GetScreenToWorld2D(Vector2 position, Camera2D camera);",TODO,,Returns the world space position for a 2d camera screen space position
,,,,,
,,Timing-related functions,,,
,,void SetTargetFPS(int fps);,raylib\Timming::setTargetFPS(int $fps),,Set target FPS (maximum)
,,int GetFPS(void);,raylib\Timming::getFPS() : int,,Returns current FPS
,,float GetFrameTime(void);,raylib\Timming::getFrameTime() : float,,Returns time in seconds for last frame drawn
,,double GetTime(void);,raylib\Timming::getTime() : float,,Returns elapsed time in seconds since InitWindow()
,,            ,,,
,,Misc. functions          ,,,
,,void SetConfigFlags(unsigned int flags);,\raylib\SetConfigFlags(int $flags),,Setup init configuration flags (view FLAGS)
,,            ,,,
,,void SetTraceLogLevel(int logType);,TODO,,Set the current threshold (minimum) log level
,,void SetTraceLogExit(int logType);,TODO,,Set the exit threshold (minimum) log level
,,void SetTraceLogCallback(TraceLogCallback callback);,TODO,,Set a trace log callback to enable custom logging
,,"void TraceLog(int logType, const char *text, ...);",TODO,,"Show trace log messages (LOG_DEBUG, LOG_INFO, LOG_WARNING, LOG_ERROR)"
,,            ,,,            
,,void *MemAlloc(int size);,--,unused,Internal memory allocator
,,void MemFree(void *ptr);,--,unused,Internal memory free
,,void TakeScreenshot(const char *fileName);,\raylib\TakeScreenshot(string $fileName),,Takes a screenshot of current screen (saved a .png)
,,"int GetRandomValue(int min, int max);",--,see rand(),Returns a random value between min and max (both included)
,,,,,
,,Files management functions,,,
,,"unsigned char *LoadFileData(const char *fileName, unsigned int *bytesRead);",--,see file_get_contents(),Load file data as byte array (read)
,,void UnloadFileData(unsigned char *data);,--,not needed,Unload file data allocated by LoadFileData()
,,"bool SaveFileData(const char *fileName, void *data, unsigned int bytesToWrite);",--,see file_put_contents(),"Save data to file from byte array (write), returns true on success"
,,char *LoadFileText(const char *fileName);,--,see file_get_contents(),"Load text data from file (read), returns a '\0' terminated string"
,,void UnloadFileText(unsigned char *text);,--,not needed,Unload file text data allocated by LoadFileText()
,,"bool SaveFileText(const char *fileName, char *text);",--,see file_put_contents(),"Save text data to file (write), string must be '\0' terminated, returns true on success"
,,bool FileExists(const char *fileName);,--,see file_exists(),Check if file exists
,,bool DirectoryExists(const char *dirPath);,--,see is_dir(),Check if a directory path exists
,,"bool IsFileExtension(const char *fileName, const char *ext);",--,not needed,"Check file extension (including point: .png, .wav)"
,,const char *GetFileExtension(const char *fileName);,--,http://php.net/manual/en/function.pathinfo.php or SplFileInfo,"Get pointer to extension for a filename string (including point: "".png"")"
,,const char *GetFileName(const char *filePath);,--,http://php.net/manual/en/function.pathinfo.php or SplFileInfo,Get pointer to filename for a path string
,,const char *GetFileNameWithoutExt(const char *filePath);,--,http://php.net/manual/en/function.pathinfo.php or SplFileInfo,Get filename string without extension (uses static string)
,,const char *GetDirectoryPath(const char *filePath);,--,http://php.net/manual/en/function.pathinfo.php or SplFileInfo,Get full path for a given fileName with path (uses static string)
,,const char *GetPrevDirectoryPath(const char *dirPath);,--,http://php.net/manual/en/function.pathinfo.php or SplFileInfo,Get previous directory path for a given path (uses static string)
,,const char *GetWorkingDirectory(void);,--,http://php.net/manual/en/function.getcwd.php,Get current working directory (uses static string)
,,"char **GetDirectoryFiles(const char *dirPath, int *count);",--,http://php.net/manual/en/function.dir.php,Get filenames in a directory path (memory should be freed)
,,void ClearDirectoryFiles(void);,--,not needed,Clear directory files paths buffers (free memory)
,,bool ChangeDirectory(const char *dir);,--,http://php.net/manual/en/function.chdir.php,"Change working directory, return true on success"
,,bool IsFileDropped(void);,TODO,,Check if a file has been dropped into window
,,char **GetDroppedFiles(int *count);,TODO,,Get dropped files names (memory should be freed)
,,void ClearDroppedFiles(void);,TODO,,Clear dropped files paths buffer (free memory)
,,long GetFileModTime(const char *fileName);,--,http://php.net/manual/en/function.filemtime.php,Get file modification time (last write time)
,,,,,
,,"unsigned char *CompressData(unsigned char *data, int dataLength, int *compDataLength);",,http://php.net/manual/en/function.gzdeflate.php,Compress data (DEFLATE algorithm)
,,"unsigned char *DecompressData(unsigned char *compData, int compDataLength, int *dataLength);",,http://php.net/manual/en/function.gzinflate.php,Decompress data (DEFLATE algorithm)
,,,,,
,,Input-related functions: keyboard,,,
,,bool IsKeyPressed(int key);,raylib\Input\Key::isPressed(int $key) : bool,,Detect if a key has been pressed once
,,bool IsKeyDown(int key);,raylib\Input\Key::isDown(int $key) : bool,,Detect if a key is being pressed
,,bool IsKeyReleased(int key);,raylib\Input\Key::isReleased(int $key) : bool,,Detect if a key has been released once
,,bool IsKeyUp(int key);,raylib\Input\Key::isUp(int $key) : bool,,Detect if a key is NOT being pressed
,,void SetExitKey(int key);,raylib\Input\Key::setExit(int $key),,Set a custom key to exit program (default is ESC)
,,int GetKeyPressed(void);,raylib\Input\Key::getPressed() : int,,"Get key pressed (keycode), call it multiple times for keys queued"
,,int GetCharPressed(void);,raylib\Input\Key::getKeyPressed() : int,,"Get char pressed (unicode), call it multiple times for chars queued"
,,,,,
,,Input-related functions: gamepads,,,
,,bool IsGamepadAvailable(int gamepad);,raylib\Input\Gamepad::isAvailable(int $gamepad) : bool,,Detect if a gamepad is available
,,"bool IsGamepadName(int gamepad, const char *name);",raylib\Input\Gamepad::isName(int $gamepad) : bool,,Check gamepad name (if available)
,,const char *GetGamepadName(int gamepad);,raylib\Input\Gamepad::getName(int $gamepad) : string,,Return gamepad internal name id
,,"bool IsGamepadButtonPressed(int gamepad, int button);","raylib\Input\Gamepad::isButtonPressed(int $gamepad, int $button) : bool",,Detect if a gamepad button has been pressed once
,,"bool IsGamepadButtonDown(int gamepad, int button);","raylib\Input\Gamepad::isButtonDown(int $gamepad, int $button) : bool",,Detect if a gamepad button is being pressed
,,"bool IsGamepadButtonReleased(int gamepad, int button);","raylib\Input\Gamepad::isButtonReleased(int $gamepad, int $button) : bool",,Detect if a gamepad button has been released once
,,"bool IsGamepadButtonUp(int gamepad, int button);","raylib\Input\Gamepad::isButtonUp(int $gamepad, int $button) : bool",,Detect if a gamepad button is NOT being pressed
,,int GetGamepadButtonPressed(void);,raylib\Input\Gamepad::getButtonPressed() : int,,Get the last gamepad button pressed
,,int GetGamepadAxisCount(int gamepad);,raylib\Input\Gamepad::getAxisCount(int $gamepad) : int,,Return gamepad axis count for a gamepad
,,"float GetGamepadAxisMovement(int gamepad, int axis);","raylib\Input\Gamepad::getAxisMovement(int $gamepad, int $axis) : float",,Return axis movement value for a gamepad axis
,,,,,
,,Input-related functions: mouse,,,
,,bool IsMouseButtonPressed(int button);,raylib\Input\Mouse::isButtonPressed(int $button) : bool,,Detect if a mouse button has been pressed once
,,bool IsMouseButtonDown(int button);,raylib\Input\Mouse::isButtonDown(int $button) : bool,,Detect if a mouse button is being pressed
,,bool IsMouseButtonReleased(int button);,raylib\Input\Mouse::isButtonReleased(int $button) : bool,,Detect if a mouse button has been released once
,,bool IsMouseButtonUp(int button);,raylib\Input\Mouse::isButtonUp(int $button) : bool,,Detect if a mouse button is NOT being pressed
,,int GetMouseX(void);,raylib\Input\Mouse::getX() : int,,Returns mouse position X
,,int GetMouseY(void);,raylib\Input\Mouse::getY() : int,,Returns mouse position Y
,,Vector2 GetMousePosition(void);,raylib\Input\Mouse::getPosition() : Vector2,,Returns mouse position XY
,,"void SetMousePosition(int x, int y);","raylib\Input\Mouse::setPosition(int $x, int $y)",,Set mouse position XY
,,"void SetMouseOffset(int offsetX, int offsetY);","raylib\Input\Mouse::setOffset(int $offsetX, int $offsetY)",,Set mouse offset
,,"void SetMouseScale(float scaleX, float scaleY);","raylib\Input\Mouse::setScale(float $scaleX, float $scaleY)",,Set mouse scaling
,,float GetMouseWheelMove(void);,raylib\Input\Mouse::getWheelMove() : float,,Returns mouse wheel movement Y
,,int GetMouseCursor(void);,raylib\Input\Mouse::getCursor() : int,,Returns mouse cursor if (MouseCursor enum)
,,void SetMouseCursor(int cursor);,raylib\Input\Mouse::setCursor(int $cursor),,Set mouse cursor
,,,,,
,,Input-related functions: touch,,,
,,int GetTouchX(void);,TODO,,Returns touch position X for touch point 0 (relative to screen size)
,,int GetTouchY(void);,TODO,,Returns touch position Y for touch point 0 (relative to screen size)
,,Vector2 GetTouchPosition(int index);,TODO,,Returns touch position XY for a touch point index (relative to screen size)
,,,,,
,,Gestures and Touch Handling Functions (Module: gestures),,,
,,void SetGesturesEnabled(unsigned int gestureFlags);,TODO,,Enable a set of gestures using flags
,,bool IsGestureDetected(int gesture);,TODO,,Check if a gesture have been detected
,,int GetGestureDetected(void);,TODO,,Get latest detected gesture
,,int GetTouchPointsCount(void);,TODO,,Get touch points count
,,float GetGestureHoldDuration(void);,TODO,,Get gesture hold time in milliseconds
,,Vector2 GetGestureDragVector(void);,TODO,,Get gesture drag vector
,,float GetGestureDragAngle(void);,TODO,,Get gesture drag angle
,,Vector2 GetGesturePinchVector(void);,TODO,,Get gesture pinch delta
,,float GetGesturePinchAngle(void);,TODO,,Get gesture pinch angle
,,,,,
,,,,,
,,Camera System Functions (Module: camera),,,
,,"void SetCameraMode(Camera camera, int mode);",TODO,,Set camera mode (multiple camera modes available)
,,void UpdateCamera(Camera *camera);,TODO,,Update camera position for selected mode
,,,,,
,,void SetCameraPanControl(int keyPan);,TODO,,Set camera pan key to combine with mouse movement (free camera)
,,void SetCameraAltControl(int keyAlt);,TODO,,Set camera alt key to combine with mouse movement (free camera)
,,void SetCameraSmoothZoomControl(int keySmoothZoom);,TODO,,Set camera smooth zoom key to combine with mouse (free camera)
,,"void SetCameraMoveControls(int keyFront, int keyBack, int keyRight, int keyLeft, int keyUp, int keyDown);",TODO,,Set camera move controls (1st person and 3rd person cameras)
,,,,,
,,Basic shapes drawing functions,,,
,,"void DrawPixel(int posX, int posY, Color color);","raylib\Draw::pixel(int $posX, int $posY, raylib\Color $color)",,Draw a pixel
,,"void DrawPixelV(Vector2 position, Color color);","raylib\Draw::pixelV(raylib\Vector2 $position, raylib\Color $color)",,Draw a pixel (Vector version)
,,"void DrawLine(int startPosX, int startPosY, int endPosX, int endPosY, Color color);","raylib\Draw::line(int $startPosX, int $startPosY, int $endPosX, int $endPosY, raylib\Color $color)",,Draw a line
,,"void DrawLineV(Vector2 startPos, Vector2 endPos, Color color);","raylib\Draw::lineV(raylib\Vector2 $startPos, raylib\Vector2 $endPos, raylib\Color $color)",,Draw a line (Vector version)
,,"void DrawLineEx(Vector2 startPos, Vector2 endPos, float thick, Color color);","raylib\Draw::lineEx(raylib\Vector2 $startPos, raylib\Vector2 $endPos, float $thick, raylib\Color $color)",,Draw a line defining thickness
,,"void DrawLineBezier(Vector2 startPos, Vector2 endPos, float thick, Color color);","raylib\Draw::lineBezier(raylib\Vector2 $startPos, raylib\Vector2 $endPos, float $thick, raylib\Color $color)",,Draw a line using cubic-bezier curves in-out
,,"void DrawLineStrip(Vector2 *points, int pointsCount, Color color);",TODO,,Draw lines sequence
,,"void DrawCircle(int centerX, int centerY, float radius, Color color);","raylib\Draw::circle(int $centerX, int $centerY, float $radius, raylib\Color $color)",,Draw a color-filled circle
,,"void DrawCircleSector(Vector2 center, float radius, int startAngle, int endAngle, int segments, Color color);","raylib\Draw::circleSector(raylib\Vector2 $center, float $radius, int $startAngle, int $endAngle, int $segments, raylib\Color $color)",,Draw a piece of a circle
,,"void DrawCircleSectorLines(Vector2 center, float radius, int startAngle, int endAngle, int segments, Color color);","raylib\Draw::circleSectorLines(raylib\Vector2 $center, float $radius, int $startAngle, int $endAngle, int $segments, raylib\Color $color)",,Draw circle sector outline
,,"void DrawCircleGradient(int centerX, int centerY, float radius, Color color1, Color color2);","raylib\Draw::circleGradient(int $centerX, int $centerY, float $radius, raylib\Color $color1, raylib\Color $color2)",,Draw a gradient-filled circle
,,"void DrawCircleV(Vector2 center, float radius, Color color);","raylib\Draw::circleV(raylib\Vector2 $center, float $radius, raylib\Color $color)",,Draw a color-filled circle (Vector version)
,,"void DrawCircleLines(int centerX, int centerY, float radius, Color color);","raylib\Draw::circleLines(int $centerX, int $centerY, float $radius, raylib\Color $color)",,Draw circle outline
,,"void DrawEllipse(int centerX, int centerY, float radiusH, float radiusV, Color color);","raylib\Draw::ellipse(int $centerX, int $centerY, float $radiusH, float $radiusV, raylib\Color $color)",,Draw ellipse
,,"void DrawEllipseLines(int centerX, int centerY, float radiusH, float radiusV, Color color);","raylib\Draw::ellipseLines(int $centerX, int $centerY, float $radiusH, float $radiusV, raylib\Color $color)",,Draw ellipse outline
,,"void DrawRing(Vector2 center, float innerRadius, float outerRadius, int startAngle, int endAngle, int segments, Color color);","raylib\Draw::ring(raylib\Vector2 $center, float $innerRadius, float $outerRadius, int $startAngle, int $endAngle, int $segments, raylib\Color $color)",,Draw ring
,,"void DrawRingLines(Vector2 center, float innerRadius, float outerRadius, int startAngle, int endAngle, int segments, Color color);","raylib\Draw::ringLines(raylib\Vector2 $center, float $innerRadius, float $outerRadius, int $startAngle, int $endAngle, int $segments, raylib\Color $color)",,Draw ring outline
,,"void DrawRectangle(int posX, int posY, int width, int height, Color color);","raylib\Draw::rectangle(int $posX, int $posY, int $width, int $height, raylib\Color $color)",,Draw a color-filled rectangle
,,"void DrawRectangleV(Vector2 position, Vector2 size, Color color);","raylib\Draw::rectangleV(raylib\Vector2 $position, raylib\Vector2 $size, raylib\Color $color)",,Draw a color-filled rectangle (Vector version)
,,"void DrawRectangleRec(Rectangle rec, Color color);","raylib\Draw::rectangleRec(raylib\Rectangle $rec, raylib\Color $color)",,Draw a color-filled rectangle
,,"void DrawRectanglePro(Rectangle rec, Vector2 origin, float rotation, Color color);","raylib\Draw::rectanglePro(raylib\Rectangle $rec, raylib\Vector2 $origin, float $rotation, raylib\Color $color)",,Draw a color-filled rectangle with pro parameters
,,"void DrawRectangleGradientV(int posX, int posY, int width, int height, Color color1, Color color2);","raylib\Draw::rectangleGradientV(int $posX, int $posY, int $width, int $height, raylib\Color $color1, raylib\Color $color2)",,Draw a vertical-gradient-filled rectangle
,,"void DrawRectangleGradientH(int posX, int posY, int width, int height, Color color1, Color color2);","raylib\Draw::rectangleGradientV(int $posX, int $posY, int $width, int $height, raylib\Color $color1, raylib\Color $color2)",,Draw a horizontal-gradient-filled rectangle
,,"void DrawRectangleGradientEx(Rectangle rec, Color col1, Color col2, Color col3, Color col4);","raylib\Draw::rectangleGradientEx(raylib\Rectangle $rec, raylib\Color $col1, raylib\Color $col2, raylib\Color $col3, raylib\Color $col4)",,Draw a gradient-filled rectangle with custom vertex colors
,,"void DrawRectangleLines(int posX, int posY, int width, int height, Color color);","raylib\Draw::rectangleLines(int $posX, int $posY, int $width, int $height, raylib\Color $color)",,Draw rectangle outline
,,"void DrawRectangleLinesEx(Rectangle rec, int lineThick, Color color);","raylib\Draw::rectangleLinesEx(raylib\Rectangle $rec, int $lineThick, raylib\Color color)",,Draw rectangle outline with extended parameters
,,"void DrawRectangleRounded(Rectangle rec, float roundness, int segments, Color color);","raylib\Draw::rectangleRounded(raylib\Rectangle $rec, float $roundness, int $segments, raylib\Color color)",,Draw rectangle with rounded edges
,,"void DrawRectangleRoundedLines(Rectangle rec, float roundness, int segments, int lineThick, Color color);","raylib\Draw::rectangleRoundedLines(raylib\Rectangle $rec, float $roundness, int $segments, int $lineThick, raylib\Color color)",,Draw rectangle with rounded edges outline
,,"void DrawTriangle(Vector2 v1, Vector2 v2, Vector2 v3, Color color);","raylib\Draw::triangle(raylib\Vector2 $v1, raylib\Vector2 $v2, raylib\Vector2 $v3, raylib\Color $color)",,Draw a color-filled triangle (vertex in counter-clockwise order!)
,,"void DrawTriangleLines(Vector2 v1, Vector2 v2, Vector2 v3, Color color);","raylib\triangleLines(raylib\Vector2 v1, raylib\Vector2 v2, raylib\Vector2 v3, raylib\Color color)",,Draw triangle outline (vertex in counter-clockwise order!)
,,"void DrawTriangleFan(Vector2 *points, int pointsCount, Color color);","raylib\Draw::triangleFan(raylib\Vector2[] $points, raylib\Color $color)",,Draw a triangle fan defined by points (first vertex is the center)
,,"void DrawTriangleStrip(Vector2 *points, int pointsCount, Color color);","raylib\Draw::triangleStrip(raylib\Vector2[] $points, raylib\Color $color)",,Draw a triangle strip defined by points
,,"void DrawPoly(Vector2 center, int sides, float radius, float rotation, Color color);","raylib\Draw::poly(raylib\Vector2 $center, int $sides, float $radius, float $rotation, raylib\Color $color)",,Draw a regular polygon (Vector version)
,,"void DrawPolyLines(Vector2 center, int sides, float radius, float rotation, Color color);","raylib\Draw::polyLines(raylib\Vector2 $center, int $sides, float $radius, float $rotation, raylib\Color $color)",,Draw a polygon outline of n sides
,,,,,
,,Basic shapes collision detection functions,,,
,,"bool CheckCollisionRecs(Rectangle rec1, Rectangle rec2);","raylib\Collision\checkRecs(raylib\Rectangle $rec1, raylib\Rectangle $rec2)",,Check collision between two rectangles
,,"bool CheckCollisionCircles(Vector2 center1, float radius1, Vector2 center2, float radius2);","raylib\Collision\checkCircles(raylib\Vector2 center1, float radius1, raylib\Vector2 center2, float radius2)",,Check collision between two circles
,,"bool CheckCollisionCircleRec(Vector2 center, float radius, Rectangle rec);","raylib\Collision\checkCircleRec(raylib\Vector2 center, float radius, raylib\Rectangle rec)",,Check collision between circle and rectangle
,,"bool CheckCollisionPointRec(Vector2 point, Rectangle rec);","raylib\Collision\checkPointRec(raylib\Vector2 point, raylib\Rectangle rec)",,Check if point is inside rectangle
,,"bool CheckCollisionPointCircle(Vector2 point, Vector2 center, float radius);","raylib\Collision\checkPointCircle(raylib\Vector2 point, raylib\Vector2 center, float radius)",,Check if point is inside circle
,,"bool CheckCollisionPointTriangle(Vector2 point, Vector2 p1, Vector2 p2, Vector2 p3);","raylib\Collision\checkPointTriangle(raylib\Vector2 point, raylib\Vector2 p1, raylib\Vector2 p2, Vector2 p3)",,Check if point is inside a triangle
,,"bool CheckCollisionLines(Vector2 startPos1, Vector2 endPos1, Vector2 startPos2, Vector2 endPos2, Vector2 *collisionPoint);",TODO,,"Check the collision between two lines defined by two points each, returns collision point by reference"
,,"Rectangle GetCollisionRec(Rectangle rec1, Rectangle rec2);","raylib\Collision\getRec(raylib\Rectangle rec1, raylib\Rectangle rec2) : raylib\Rectangle",,Get collision rectangle for two rectangles collision
,,,,,
,,Image loading functions,,,
,,Image LoadImage(const char *fileName);,new raylib\Image(string $filename),,Load image from file into CPU memory (RAM)
,,"Image LoadImageRaw(const char *fileName, int width, int height, int format, int headerSize);","raylib\Image::fromRaw(string $fileName, int $width, int $height, int $format, int $headerSize)",,Load image from RAW file data
,,"Image LoadImageAnim(const char *fileName, int *frames);",TODO,,Load image sequence from file (frames appended to image.data)
,,"Image LoadImageFromMemory(const char *fileType, const unsigned char *fileData, int dataSize);",TODO,,"Load image from memory buffer, fileType refers to extension: i.e. ""png"""
,,void UnloadImage(Image image);,--,unset($image),Unload image from CPU memory (RAM)
,,"bool ExportImage(Image image, const char *fileName);",raylib\Image->export(string $fileName),,"Export image data to file, returns true on success"
,,"bool ExportImageAsCode(Image image, const char *fileName);",raylib\Image->exportAsCode(string $fileName),,"Export image as code file defining an array of bytes, returns true on success"
,,,,,
,,Image generation functions,,,
,,"Image GenImageColor(int width, int height, Color color);",TODO,,Generate image: plain color
,,"Image GenImageGradientV(int width, int height, Color top, Color bottom);",TODO,,Generate image: vertical gradient
,,"Image GenImageGradientH(int width, int height, Color left, Color right);",TODO,,Generate image: horizontal gradient
,,"Image GenImageGradientRadial(int width, int height, float density, Color inner, Color outer);",TODO,,Generate image: radial gradient
,,"Image GenImageChecked(int width, int height, int checksX, int checksY, Color col1, Color col2);",TODO,,Generate image: checked
,,"Image GenImageWhiteNoise(int width, int height, float factor);",TODO,,Generate image: white noise
,,"Image GenImagePerlinNoise(int width, int height, int offsetX, int offsetY, float scale);",TODO,,Generate image: perlin noise
,,"Image GenImageCellular(int width, int height, int tileSize);",TODO,,Generate image: cellular algorithm. Bigger tileSize means bigger cells
,,,,,
,,Image manipulation functions,,,
,,Image ImageCopy(Image image);,raylib\Image->copy() : raylib\Image,,Create an image duplicate (useful for transformations)
,,"Image ImageFromImage(Image image, Rectangle rec);","raylib\Image->fromImage(raylib\Image $image, raylib\Rectangle $rec) : raylib\Image",,Create an image from another image piece
,,"Image ImageText(const char *text, int fontSize, Color color);","raylib\Image->fromDefaultFont(string $text ,int $fontSize, raylib\Color $color) : raylib\Image",,Create an image from text (default font)
,,"Image ImageTextEx(Font font, const char *text, float fontSize, float spacing, Color tint);","raylib\Image->fromFont(raylib\Font $font, string $text ,int $fontSize, float $spacing, raylib\Color $color) : raylib\Image",,Create an image from text (custom sprite font)
,,"void ImageFormat(Image *image, int newFormat);",raylib\Image->format(int $newFormat),,Convert image data to desired format
,,"void ImageToPOT(Image *image, Color fill);",raylib\Image->toPot(raylib\Color $fillColor),,Convert image to POT (power-of-two)
,,"void ImageCrop(Image *image, Rectangle crop);",raylib\Image->crop(raylib\Rectangle $crop),,Crop an image to a defined rectangle
,,"void ImageAlphaCrop(Image *image, float threshold);",raylib\Image->alphaCrop(float $threshold),,Crop image depending on alpha value
,,"void ImageAlphaClear(Image *image, Color color, float threshold);","raylib\Imag->alphaClear(raylib\Color $color, float $threshold)",,Clear alpha channel to desired color
,,"void ImageAlphaMask(Image *image, Image alphaMask);",raylib\Image->alphaMask(raylib\Image $alphaMask),,Apply alpha mask to image
,,void ImageAlphaPremultiply(Image *image);,raylib\Image->alphaPremultiply(),,Premultiply alpha channel
,,"void ImageResize(Image *image, int newWidth, int newHeight);","raylib\Image->resize(int $newWidth, int $newHeight)",,Resize image (Bicubic scaling algorithm)
,,"void ImageResizeNN(Image *image, int newWidth,int newHeight);","raylib\Image->resizeNearestNeighbor(int $newWidth, int $newHeight)",,Resize image (Nearest-Neighbor scaling algorithm)
,,"void ImageResizeCanvas(Image *image, int newWidth, int newHeight, int offsetX, int offsetY, Color fill);","raylib\Image->resizeCanvas(int $newWidth, int $newHeight, int $offsetX, int $offsetY, raylib\Color $color)",,Resize canvas and fill with color
,,void ImageMipmaps(Image *image);,raylib\Image->genMipmaps(),,Generate all mipmap levels for a provided image
,,"void ImageDither(Image *image, int rBpp, int gBpp, int bBpp, int aBpp);","raylib\Image->dither(int $rBpp, int $gBpp, int $bBpp, int $aBpp)",,Dither image data to 16bpp or lower (Floyd-Steinberg dithering)
,,void ImageFlipVertical(Image *image);,raylib\Image->flipVertical(),,Flip image vertically
,,void ImageFlipHorizontal(Image *image);,raylib\Image->flipHorizontal(),,Flip image horizontally
,,void ImageRotateCW(Image *image);,raylib\Image->rotateClockwise(),,Rotate image clockwise 90deg
,,void ImageRotateCCW(Image *image);,raylib\Image->rotateCounterClockwise(),,Rotate image counter-clockwise 90deg
,,"void ImageColorTint(Image *image, Color color);",raylib\Image->colorTint(raylib\Color color),,Modify image color: tint
,,void ImageColorInvert(Image *image);,raylib\Image->colorInvert(),,Modify image color: invert
,,void ImageColorGrayscale(Image *image);,raylib\Image->colorGrayscale(),,Modify image color: grayscale
,,"void ImageColorContrast(Image *image, float contrast);",raylib\Image->colorContrast(float $contrast),,Modify image color: contrast (-100 to 100)
,,"void ImageColorBrightness(Image *image, int brightness);",raylib\Image->colorBrightness(int 4brightness),,Modify image color: brightness (-255 to 255)
,,"void ImageColorReplace(Image *image, Color color, Color replace);","raylib\Imag->colorReplace(raylib\Color $color, raylib\Color $replace)",,Modify image color: replace color
,,Color *LoadImageColors(Image image);,raylib\Image->getData() : \raylib\Color,,Load color data from image as a Color array (RGBA - 32bit)
,,"Color *LoadImagePalette(Image image, int maxPaletteSize, int *colorsCount);","raylib\Image->getData(int $maxPaletteSize, int[] $colorsCount) : \raylib\Color",,Load colors palette from image as a Color array (RGBA - 32bit)
,,void UnloadImageColors(Color *colors);,--,use unset(),Unload color data loaded with LoadImageColors()
,,void UnloadImagePalette(Color *colors);,--,use unset(),Unload colors palette loaded with LoadImagePalette()
,,"Rectangle GetImageAlphaBorder(Image image, float threshold);",raylib\Imag->getAlphaBorder(float $threshold) : ralib\Rectangle,,Get image alpha border rectangle
,,,,,
,,Image drawing functions,,,
,,"void ImageClearBackground(Image *dst, Color color);",TODO,,Clear image background with given color
,,"void ImageDrawPixel(Image *dst, int posX, int posY, Color color);",TODO,,Draw pixel within an image
,,"void ImageDrawPixelV(Image *dst, Vector2 position, Color color);",TODO,,Draw pixel within an image (Vector version)
,,"void ImageDrawLine(Image *dst, int startPosX, int startPosY, int endPosX, int endPosY, Color color);",TODO,,Draw line within an image
,,"void ImageDrawLineV(Image *dst, Vector2 start, Vector2 end, Color color);",TODO,,Draw line within an image (Vector version)
,,"void ImageDrawCircle(Image *dst, int centerX, int centerY, int radius, Color color);",TODO,,Draw circle within an image
,,"void ImageDrawCircleV(Image *dst, Vector2 center, int radius, Color color);",TODO,,Draw circle within an image (Vector version)
,,"void ImageDrawRectangle(Image *dst, int posX, int posY, int width, int height, Color color);",TODO,,Draw rectangle within an image
,,"void ImageDrawRectangleV(Image *dst, Vector2 position, Vector2 size, Color color);",TODO,,Draw rectangle within an image (Vector version)
,,"void ImageDrawRectangleRec(Image *dst, Rectangle rec, Color color);",TODO,,Draw rectangle within an image
,,"void ImageDrawRectangleLines(Image *dst, Rectangle rec, int thick, Color color);",TODO,,Draw rectangle lines within an image
,,"void ImageDraw(Image *dst, Image src, Rectangle srcRec, Rectangle dstRec, Color tint);",TODO,,Draw a source image within a destination image (tint applied to source)
,,"void ImageDrawText(Image *dst, const char *text, int posX, int posY, int fontSize, Color color);",TODO,,Draw text (using default font) within an image (destination)
,,"void ImageDrawTextEx(Image *dst, Font font, const char *text, Vector2 position, float fontSize, float spacing, Color tint);",TODO,,Draw text (custom sprite font) within an image (destination)
,,,,,
,,,,,
,,Texture loading functions,,,
,,Texture2D LoadTexture(const char *fileName);,new raylib\Texture(string $fileName),,Load texture from file into GPU memory (VRAM)
,,Texture2D LoadTextureFromImage(Image image);,raylib\Image->toTexture() : raylib\Texture,,Load texture from image data
,,"TextureCubemap LoadTextureCubemap(Image image, int layoutType);",TODO,,"Load cubemap from image, multiple image cubemap layouts supported"
,,"RenderTexture2D LoadRenderTexture(int width, int height);","new raylib\RenderTexture(int $width, int $height)",,Load texture for rendering (framebuffer)
,,void UnloadTexture(Texture2D texture);,--,unset($texture),Unload texture from GPU memory (VRAM)
,,void UnloadRenderTexture(RenderTexture2D target);,--,unset($renderTexture),Unload render texture from GPU memory (VRAM)
,,"void UpdateTexture(Texture2D texture, const void *pixels);",TODO,,Update GPU texture with new data
,,"void UpdateTextureRec(Texture2D texture, Rectangle rec, const void *pixels);",TODO,,Update GPU texture rectangle with new data
,,Image GetTextureData(Texture2D texture);,TODO,,Get pixel data from GPU texture and return an Image
,,Image GetScreenData(void);,TODO,,Get pixel data from screen buffer and return an Image (screenshot)
,,,,,
,,Texture configuration functions,,,
,,void GenTextureMipmaps(Texture2D *texture);,raylib\Texture->genMipmaps(),,Generate GPU mipmaps for a texture
,,"void SetTextureFilter(Texture2D texture, int filterMode);",raylib\Texture->setFilter(int $filterMode),,Set texture scaling filter mode
,,"void SetTextureWrap(Texture2D texture, int wrapMode);",raylib\Texture->setWrap(int $wrapMode),,Set texture wrapping mode
,,,,,
,,Texture drawing functions,,,
,,"void DrawTexture(Texture2D texture, int posX, int posY, Color tint);","raylib\Texture->draw(int $posX, int $posY, raylib\Color $tint)",,Draw a Texture2D
,,"void DrawTextureV(Texture2D texture, Vector2 position, Color tint);","raylib\Texture->drawV(raylib\Vector $position, raylib\Color $tint)",,Draw a Texture2D with position defined as Vector2
,,"void DrawTextureEx(Texture2D texture, Vector2 position, float rotation, float scale, Color tint);","raylib\Texture->drawEx(raylib\Vector $position, float $rotation, float scale, raylib\Color $tint)",,Draw a Texture2D with extended parameters
,,"void DrawTextureRec(Texture2D texture, Rectangle source, Vector2 position, Color tint);","raylib\Texture->drawRec(raylib\Rectangle $rec, raylib\Vector $position, raylib\Color $tint)",,Draw a part of a texture defined by a rectangle
,,"void DrawTextureQuad(Texture2D texture, Vector2 tiling, Vector2 offset, Rectangle quad, Color tint);","raylib\Texture->drawQuad(raylib\Vector $tiling, raylib\Vector $offset, raylib\Rectangle $quad, raylib\Color $tint)",,Draw texture quad with tiling and offset parameters
,,"void DrawTextureTiled(Texture2D texture, Rectangle source, Rectangle dest, Vector2 origin, float rotation, float scale, Color tint);","raylib\Texture->drawTiled(raylib\Rectangle $source, raylib\Rectangle $dest, raylib\Vector $origin, float $rotation, float $scale, raylib\Color $tint)",,Draw part of a texture (defined by a rectangle) with rotation and scale tiled into dest.
,,"void DrawTexturePro(Texture2D texture, Rectangle source, Rectangle dest, Vector2 origin, float rotation, Color tint);","raylib\Texture->drawPro(raylib\Rectangle $source, raylib\Rectangle $dest, raylib\Vector $origin, float $rotation, raylib\Color $tint)",,Draw a part of a texture defined by a rectangle with 'pro' parameters
,,"void DrawTextureNPatch(Texture2D texture, NPatchInfo nPatchInfo, Rectangle dest, Vector2 origin, float rotation, Color tint);",TODO,,Draws a texture (or part of it) that stretches or shrinks nicely
,,,,,
,,Color/pixel related functions,,,
,,"Color Fade(Color color, float alpha);",raylib\Color->fade(float $alpha),,"Returns color with alpha applied, alpha goes from 0.0f to 1.0f"
,,int ColorToInt(Color color);,raylib\Color->toInt(),,Returns hexadecimal value for a Color
,,Vector4 ColorNormalize(Color color);,raylib\Color->normalize(),,Returns Color normalized as float [0..1]
,,Color ColorFromNormalized(Vector4 normalized);,raylib\Color::fromNormalized(/raylib/Vector4 $normalized) : /raylib/Color,,Returns Color from normalized values [0..1]
,,Vector3 ColorToHSV(Color color);,raylib\Color->toHSV() : /raylib/Vector3,,Returns HSV values for a Color
,,"Color ColorFromHSV(float hue, float saturation, float value);","raylib\Color::fromHSV(float $hue, float $saturation, float $value) : /raylib/Color",,Returns a Color from HSV values
,,"Color ColorAlpha(Color color, float alpha);",TODO,,"Returns color with alpha applied, alpha goes from 0.0f to 1.0f"
,,"Color ColorAlphaBlend(Color dst, Color src, Color tint);",TODO,,Returns src alpha-blended into dst color with tint
,,Color GetColor(int hexValue);,raylib\Color::fromInt(int $hexValue) : /raylib/Color,,Get Color structure from hexadecimal value
,,"Color GetPixelColor(void *srcPtr, int format);",TODO,,Get Color from a source pixel pointer of certain format
,,"void SetPixelColor(void *dstPtr, Color color, int format);",TODO,,Set color formatted into destination pixel pointer
,,"int GetPixelDataSize(int width, int height, int format);",TODO,,Get pixel data size in bytes for certain format
,,,,,
,,Font loading/unloading functions,,,
,,Font GetFontDefault(void);,raylib\Font::fromDefault() : /raylib/Font,,Get the default Font
,,Font LoadFont(const char *fileName);,new raylib\Font(string $fileName),,Load font from file into GPU memory (VRAM)
,,"Font LoadFontEx(const char *fileName, int fontSize, int *fontChars, int charsCount);","raylib\Font::fromCustom(string $fileName,  int $fontSize, int $fontChars, int $charsCount)",,Load font from file with extended parameters
,,"Font LoadFontFromImage(Image image, Color key, int firstChar);",TODO,,Load font from Image (XNA style)
,,"Font LoadFontFromMemory(const char *fileType, const unsigned char *fileData, int dataSize, int fontSize, int *fontChars, int charsCount);",TODO,,"Load font from memory buffer, fileType refers to extension: i.e. ""ttf"""
,,"CharInfo *LoadFontData(const unsigned char *fileData, int dataSize, int fontSize, int *fontChars, int charsCount, int type);","raylib\CharInfo::fromFontData(string $fileName, int fontSize, int[] $fontChars, int type)",,Load font data for further use
,,"Image GenImageFontAtlas(const CharInfo *chars, Rectangle **recs, int charsCount, int fontSize, int padding, int packMethod);",TODO,,Generate image font atlas using chars info
,,"void UnloadFontData(CharInfo *chars, int charsCount);",--,use unset(),Unload font chars info data (RAM)
,,void UnloadFont(Font font);,--,use unset(),Unload Font from GPU memory (VRAM)
,,,,,
,,Text drawing functions,,,
,,"void DrawFPS(int posX, int posY);","raylib\Text::drawFps(int $posX, int $posY)",,Shows current FPS
,,"void DrawText(const char *text, int posX, int posY, int fontSize, Color color);","raylib\Text::draw(string $text, int $posX, int $posY, int $fontSize, raylib\Color $color)",,Draw text (using default font)
,,"void DrawTextEx(Font font, const char *text, Vector2 position, float fontSize, float spacing, Color tint);","raylib\Text::drawTextEx(raylib\Font $font, string $text, raylib\Vector2 $position, float $fontSize, float $spacing, raylib\Color $tint)",,Draw text using font and additional parameters
,,"void DrawTextRec(Font font, const char *text, Rectangle rec, float fontSize, float spacing, bool wordWrap, Color tint);",TODO,,Draw text using font inside rectangle limits
,,"void DrawTextRecEx(Font font, const char *text, Rectangle rec, float fontSize, float spacing, bool wordWrap, Color tint, int selectStart, int selectLength, Color selectTint, Color selectBackTint);",TODO,,Draw text using font inside rectangle limits with support for text selection
,,"void DrawTextCodepoint(Font font, int codepoint, Vector2 position, float fontSize, Color tint);",TODO,,Draw one character (codepoint)
,,,,,
,,Text misc. functions,,,
,,"int MeasureText(const char *text, int fontSize);","raylib\Text::measure(string $text, float $fontSize)",,Measure string width for default font
,,"Vector2 MeasureTextEx(Font font, const char *text, float fontSize, float spacing);","raylib\Font->measureText(string $text, float $fontSize, float $spacing)",,Measure string size for Font
,,"int GetGlyphIndex(Font font, int codepoint);",TODO,,Get index position for a unicode character on font
,,,,,
,,"Text strings management functions (no utf8 strings, only byte chars)",,,
,,"int TextCopy(char *dst, const char *src);",--,,"Copy one string to another, returns bytes copied"
,,"bool TextIsEqual(const char *text1, const char *text2);",--,,Check if two text string are equal
,,unsigned int TextLength(const char *text);,--,,"Get text length, checks for '\0' ending"
,,"const char *TextFormat(const char *text, ...);",--,,Text formatting with variables (sprintf style)
,,"const char *TextSubtext(const char *text, int position, int length);",--,,Get a piece of a text string
,,"char *TextReplace(char *text, const char *replace, const char *by);",--,,Replace text string (memory must be freed!)
,,"char *TextInsert(const char *text, const char *insert, int position);",--,,Insert text in a position (memory must be freed!)
,,"const char *TextJoin(const char **textList, int count, const char *delimiter);",--,,Join text strings with delimiter
,,"const char **TextSplit(const char *text, char delimiter, int *count);",--,,Split text into multiple strings
,,"void TextAppend(char *text, const char *append, int *position);",--,,Append text at specific position and move cursor!
,,"int TextFindIndex(const char *text, const char *find);",--,,Find first text occurrence within a string
,,const char *TextToUpper(const char *text);,--,,Get upper case version of provided string
,,const char *TextToLower(const char *text);,--,,Get lower case version of provided string
,,const char *TextToPascal(const char *text);,--,,Get Pascal case notation version of provided string
,,int TextToInteger(const char *text);,--,,Get integer value from text (negative values not supported)
,,"char *TextToUtf8(int *codepoints, int length);",--,,Encode text codepoint into utf8 text (memory must be freed!)
,,,,,
,,UTF8 text strings management functions,,,
,,"int *GetCodepoints(const char *text, int *count);",TODO,,"Get all codepoints in a string, codepoints count returned by parameters"
,,int GetCodepointsCount(const char *text);,TODO,,Get total number of characters (codepoints) in a UTF8 encoded string
,,"int GetNextCodepoint(const char *text, int *bytesProcessed);",TODO,,Returns next codepoint in a UTF8 encoded string; 0x3f('?') is returned on failure
,,"const char *CodepointToUtf8(int codepoint, int *byteLength);",TODO,,Encode codepoint into utf8 text (char array length returned as parameter)
,,,,,
,,Basic geometric 3D shapes drawing functions,,,
,,"void DrawLine3D(Vector3 startPos, Vector3 endPos, Color color);",TODO,,Draw a line in 3D world space
,,"void DrawPoint3D(Vector3 position, Color color);",TODO,,"Draw a point in 3D space, actually a small line"
,,"void DrawCircle3D(Vector3 center, float radius, Vector3 rotationAxis, float rotationAngle, Color color);",TODO,,Draw a circle in 3D world space
,,"void DrawTriangle3D(Vector3 v1, Vector3 v2, Vector3 v3, Color color);",TODO,,Draw a color-filled triangle (vertex in counter-clockwise order!)
,,"void DrawTriangleStrip3D(Vector3 *points, int pointsCount, Color color);",TODO,,Draw a triangle strip defined by points
,,"void DrawCube(Vector3 position, float width, float height, float length, Color color);",TODO,,Draw cube
,,"void DrawCubeV(Vector3 position, Vector3 size, Color color);",TODO,,Draw cube (Vector version)
,,"void DrawCubeWires(Vector3 position, float width, float height, float length, Color color);",TODO,,Draw cube wires
,,"void DrawCubeWiresV(Vector3 position, Vector3 size, Color color);",TODO,,Draw cube wires (Vector version)
,,"void DrawCubeTexture(Texture2D texture, Vector3 position, float width, float height, float length, Color color);",TODO,,Draw cube textured
,,"void DrawSphere(Vector3 centerPos, float radius, Color color);",TODO,,Draw sphere
,,"void DrawSphereEx(Vector3 centerPos, float radius, int rings, int slices, Color color);",TODO,,Draw sphere with extended parameters
,,"void DrawSphereWires(Vector3 centerPos, float radius, int rings, int slices, Color color);",TODO,,Draw sphere wires
,,"void DrawCylinder(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color);",TODO,,Draw a cylinder/cone
,,"void DrawCylinderWires(Vector3 position, float radiusTop, float radiusBottom, float height, int slices, Color color);",TODO,,Draw a cylinder/cone wires
,,"void DrawPlane(Vector3 centerPos, Vector2 size, Color color);",TODO,,Draw a plane XZ
,,"void DrawRay(Ray ray, Color color);",TODO,,Draw a ray line
,,"void DrawGrid(int slices, float spacing);",TODO,,"Draw a grid (centered at (0, 0, 0))"
,,void DrawGizmo(Vector3 position);,TODO,,Draw simple gizmo
,,,,,
,,Model loading/unloading functions,,,
,,Model LoadModel(const char *fileName);,TODO,,Load model from files (meshes and materials)
,,Model LoadModelFromMesh(Mesh mesh);,TODO,,Load model from generated mesh (default material)
,,void UnloadModel(Model model);,TODO,,Unload model (including meshes) from memory (RAM and/or VRAM)
,,void UnloadModelKeepMeshes(Model model);,TODO,,Unload model (but not meshes) from memory (RAM and/or VRAM)
,,,,,
,,Mesh loading/unloading functions,,,
,,"Mesh *LoadMeshes(const char *fileName, int *meshCount);",TODO,,Load meshes from model file
,,void UnloadMesh(Mesh mesh);,TODO,,Unload mesh from memory (RAM and/or VRAM)
,,"bool ExportMesh(Mesh mesh, const char *fileName);",TODO,,"Export mesh data to file, returns true on success"
,,,,,
,,Material loading/unloading functions,,,
,,"Material *LoadMaterials(const char *fileName, int *materialCount);",TODO,,Load materials from model file
,,Material LoadMaterialDefault(void);,TODO,,"Load default material (Supports: DIFFUSE, SPECULAR, NORMAL maps)"
,,void UnloadMaterial(Material material);,TODO,,Unload material from GPU memory (VRAM)
,,"void SetMaterialTexture(Material *material, int mapType, Texture2D texture);",TODO,,"Set texture for a material map type (MAP_DIFFUSE, MAP_SPECULAR...)"
,,"void SetModelMeshMaterial(Model *model, int meshId, int materialId);",TODO,,Set material for a mesh
,,,,,
,,Model animations loading/unloading functions,,,
,,"ModelAnimation *LoadModelAnimations(const char *fileName, int *animsCount);",TODO,,Load model animations from file
,,"void UpdateModelAnimation(Model model, ModelAnimation anim, int frame);",TODO,,Update model animation pose
,,void UnloadModelAnimation(ModelAnimation anim);,TODO,,Unload animation data
,,"bool IsModelAnimationValid(Model model, ModelAnimation anim);",TODO,,Check model animation skeleton match
,,,,,
,,Mesh generation functions,,,
,,"Mesh GenMeshPoly(int sides, float radius);",TODO,,Generate polygonal mesh
,,"Mesh GenMeshPlane(float width, float length, int resX, int resZ);",TODO,,Generate plane mesh (with subdivisions)
,,"Mesh GenMeshCube(float width, float height, float length);",TODO,,Generate cuboid mesh
,,"Mesh GenMeshSphere(float radius, int rings, int slices);",TODO,,Generate sphere mesh (standard sphere)
,,"Mesh GenMeshHemiSphere(float radius, int rings, int slices);",TODO,,Generate half-sphere mesh (no bottom cap)
,,"Mesh GenMeshCylinder(float radius, float height, int slices);",TODO,,Generate cylinder mesh
,,"Mesh GenMeshTorus(float radius, float size, int radSeg, int sides);",TODO,,Generate torus mesh
,,"Mesh GenMeshKnot(float radius, float size, int radSeg, int sides);",TODO,,Generate trefoil knot mesh
,,"Mesh GenMeshHeightmap(Image heightmap, Vector3 size);",TODO,,Generate heightmap mesh from image data
,,"Mesh GenMeshCubicmap(Image cubicmap, Vector3 cubeSize);",TODO,,Generate cubes-based map mesh from image data
,,,,,
,,Mesh manipulation functions,,,
,,BoundingBox MeshBoundingBox(Mesh mesh);,TODO,,Compute mesh bounding box limits
,,void MeshTangents(Mesh *mesh);,TODO,,Compute mesh tangents
,,void MeshBinormals(Mesh *mesh);,TODO,,Compute mesh binormals
,,void MeshNormalsSmooth(Mesh *mesh);,TODO,,Smooth (average) vertex normals
,,,,,
,,Model drawing functions,,,
,,"void DrawModel(Model model, Vector3 position, float scale, Color tint);",TODO,,Draw a model (with texture if set)
,,"void DrawModelEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint);",TODO,,Draw a model with extended parameters
,,"void DrawModelWires(Model model, Vector3 position, float scale, Color tint);",TODO,,Draw a model wires (with texture if set)
,,"void DrawModelWiresEx(Model model, Vector3 position, Vector3 rotationAxis, float rotationAngle, Vector3 scale, Color tint);",TODO,,Draw a model wires (with texture if set) with extended parameters
,,"void DrawBoundingBox(BoundingBox box, Color color);",TODO,,Draw bounding box (wires)
,,"void DrawBillboard(Camera camera, Texture2D texture, Vector3 center, float size, Color tint);",TODO,,Draw a billboard texture
,,"void DrawBillboardRec(Camera camera, Texture2D texture, Rectangle source, Vector3 center, float size, Color tint);",TODO,,Draw a billboard texture defined by source
,,,,,
,,Collision detection functions,,,
,,"bool CheckCollisionSpheres(Vector3 center1, float radius1, Vector3 center2, float radius2);",TODO,,Detect collision between two spheres
,,"bool CheckCollisionBoxes(BoundingBox box1, BoundingBox box2);",TODO,,Detect collision between two bounding boxes
,,"bool CheckCollisionBoxSphere(BoundingBox box, Vector3 center, float radius);",TODO,,Detect collision between box and sphere
,,"bool CheckCollisionRaySphere(Ray ray, Vector3 center, float radius);",TODO,,Detect collision between ray and sphere
,,"bool CheckCollisionRaySphereEx(Ray ray, Vector3 center, float radius, Vector3 *collisionPoint);",TODO,,"Detect collision between ray and sphere, returns collision point"
,,"bool CheckCollisionRayBox(Ray ray, BoundingBox box);",TODO,,Detect collision between ray and box
,,"RayHitInfo GetCollisionRayMesh(Ray ray, Mesh mesh, Matrix transform);",TODO,,Get collision info between ray and mesh
,,"RayHitInfo GetCollisionRayModel(Ray ray, Model model);",TODO,,Get collision info between ray and model
,,"RayHitInfo GetCollisionRayTriangle(Ray ray, Vector3 p1, Vector3 p2, Vector3 p3);",TODO,,Get collision info between ray and triangle
,,"RayHitInfo GetCollisionRayGround(Ray ray, float groundHeight);",TODO,,Get collision info between ray and ground plane (Y-normal plane)
,,,,,
,,Shader loading/unloading functions,,,
,,"Shader LoadShader(const char *vsFileName, const char *fsFileName);",TODO,,Load shader from files and bind default locations
,,"Shader LoadShaderCode(const char *vsCode, const char *fsCode);",TODO,,Load shader from code strings and bind default locations
,,void UnloadShader(Shader shader);,TODO,,Unload shader from GPU memory (VRAM)
,,,,,
,,Shader GetShaderDefault(void);,TODO,,Get default shader
,,Texture2D GetTextureDefault(void);,TODO,,Get default texture
,,Texture2D GetShapesTexture(void);,TODO,,Get texture to draw shapes
,,Rectangle GetShapesTextureRec(void);,TODO,,Get texture rectangle to draw shapes
,,"void SetShapesTexture(Texture2D texture, Rectangle source);",TODO,,Define default texture used to draw shapes
,,,,,
,,Shader configuration functions,,,
,,"int GetShaderLocation(Shader shader, const char *uniformName);",TODO,,Get shader uniform location
,,"int GetShaderLocationAttrib(Shader shader, const char *attribName);",TODO,,Get shader attribute location
,,"void SetShaderValue(Shader shader, int uniformLoc, const void *value, int uniformType);",TODO,,Set shader uniform value
,,"void SetShaderValueV(Shader shader, int uniformLoc, const void *value, int uniformType, int count);",TODO,,Set shader uniform value vector
,,"void SetShaderValueMatrix(Shader shader, int uniformLoc, Matrix mat);",TODO,,Set shader uniform value (matrix 4x4)
,,"void SetShaderValueTexture(Shader shader, int uniformLoc, Texture2D texture);",TODO,,Set shader uniform value for texture
,,void SetMatrixProjection(Matrix proj);,TODO,,Set a custom projection matrix (replaces internal projection matrix)
,,void SetMatrixModelview(Matrix view);,TODO,,Set a custom modelview matrix (replaces internal modelview matrix)
,,Matrix GetMatrixModelview(void);,TODO,,Get internal modelview matrix
,,Matrix GetMatrixProjection(void);,TODO,,Get internal projection matrix
,,,,,
,,Texture maps generation (PBR),,,
,,"TextureCubemap GenTextureCubemap(Shader shader, Texture2D panorama, int size, int format);",TODO,,Generate cubemap texture from 2D panorama texture
,,"TextureCubemap GenTextureIrradiance(Shader shader, TextureCubemap cubemap, int size);",TODO,,Generate irradiance texture using cubemap data
,,"TextureCubemap GenTexturePrefilter(Shader shader, TextureCubemap cubemap, int size);",TODO,,Generate prefilter texture using cubemap data
,,"Texture2D GenTextureBRDF(Shader shader, int size);",TODO,,Generate BRDF texture
,,,,,
,,Shading begin/end functions,,,
,,void BeginShaderMode(Shader shader);,TODO,,Begin custom shader drawing
,,void EndShaderMode(void);,TODO,,End custom shader drawing (use default shader)
,,void BeginBlendMode(int mode);,TODO,,"Begin blending mode (alpha, additive, multiplied)"
,,void EndBlendMode(void);,TODO,,End blending mode (reset to default: alpha blending)
,,,,,
,,VR control functions,,,
,,void InitVrSimulator(void);,TODO,,Init VR simulator for selected device parameters
,,void CloseVrSimulator(void);,TODO,,Close VR simulator for current device
,,void UpdateVrTracking(Camera *camera);,TODO,,Update VR tracking (position and orientation) and camera
,,"void SetVrConfiguration(VrDeviceInfo info, Shader distortion);",TODO,,Set stereo rendering configuration parameters
,,bool IsVrSimulatorReady(void);,TODO,,Detect if VR simulator is ready
,,void ToggleVrMode(void);,TODO,,Enable/Disable VR experience
,,void BeginVrDrawing(void);,TODO,,Begin VR simulator stereo rendering
,,void EndVrDrawing(void);,TODO,,End VR simulator stereo rendering
,,,,,
,,Audio device management functions,,,
,,void InitAudioDevice(void);,raylib\Audio::initDevice(),,Initialize audio device and context
,,void CloseAudioDevice(void);,raylib\Audio::closeDevice(),,Close the audio device and context
,,bool IsAudioDeviceReady(void);,raylib\Audio::isDeviceReady(),,Check if audio device has been initialized successfully
,,void SetMasterVolume(float volume);,raylib\Audio::setMasterVolume(float $volume),,Set master volume (listener)
,,,,,
,,Wave/Sound loading/unloading functions,,,
,,Wave LoadWave(const char *fileName);,new raylib\Wave(string $fileName),,Load wave data from file
,,"Wave LoadWaveFromMemory(const char *fileType, const unsigned char *fileData, int dataSize);",TODO,,"Load wave from memory buffer, fileType refers to extension: i.e. ""wav"""
,,Sound LoadSound(const char *fileName);,TODO,,Load sound from file
,,Sound LoadSoundFromWave(Wave wave);,TODO,,Load sound from wave data
,,"void UpdateSound(Sound sound, const void *data, int samplesCount);// Update sound buffer with new data",TODO,,Update sound buffer with new data
,,void UnloadWave(Wave wave);,--,use unset(),Unload wave data
,,void UnloadSound(Sound sound);,--,use unset(),Unload sound
,,"bool ExportWave(Wave wave, const char *fileName);",raylib\Wave->export(string $fileName),,"Export wave data to file, returns true on success"
,,"bool ExportWaveAsCode(Wave wave, const char *fileName);",raylib\Wave->exportAsCode(string $fileName),,"Export wave sample data to code (.h), returns true on success"
,,,,,
,,Wave/Sound management functions,,,
,,void PlaySound(Sound sound);,TODO,,Play a sound
,,void StopSound(Sound sound);,TODO,,Stop playing a sound
,,void PauseSound(Sound sound);,TODO,,Pause a sound
,,void ResumeSound(Sound sound);,TODO,,Resume a paused sound
,,void PlaySoundMulti(Sound sound);,TODO,,Play a sound (using multichannel buffer pool)
,,void StopSoundMulti(void);,TODO,,Stop any sound playing (using multichannel buffer pool)
,,int GetSoundsPlaying(void);,TODO,,Get number of sounds playing in the multichannel
,,bool IsSoundPlaying(Sound sound);,TODO,,Check if a sound is currently playing
,,"void SetSoundVolume(Sound sound, float volume);",TODO,,Set volume for a sound (1.0 is max level)
,,"void SetSoundPitch(Sound sound, float pitch);",TODO,,Set pitch for a sound (1.0 is base level)
,,"void WaveFormat(Wave *wave, int sampleRate, int sampleSize, int channels);","raylib\Wave->format(int $sampleRate, int $sampleSize, int $channels)",,Convert wave data to desired format
,,Wave WaveCopy(Wave wave);,raylib\Wave->copy() : raylib\Wave,,Copy a wave to a new wave
,,"void WaveCrop(Wave *wave, int initSample, int finalSample);","raylib\Wave\crop(int $initSample, int $finalSample)",,Crop a wave to defined samples range
,,float *LoadWaveSamples(Wave wave);,TODO,,Load samples data from wave as a floats array
,,void UnloadWaveSamples(float *samples);,--,use unset(),Unload samples data loaded with LoadWaveSamples()
,,,,,
,,Music management functions,,,
,,Music LoadMusicStream(const char *fileName);,TODO,,Load music stream from file
,,void UnloadMusicStream(Music music);,TODO,,Unload music stream
,,void PlayMusicStream(Music music);,TODO,,Start music playing
,,void UpdateMusicStream(Music music);,TODO,,Updates buffers for music streaming
,,void StopMusicStream(Music music);,TODO,,Stop music playing
,,void PauseMusicStream(Music music);,TODO,,Pause music playing
,,void ResumeMusicStream(Music music);,TODO,,Resume playing paused music
,,bool IsMusicPlaying(Music music);,TODO,,Check if music is playing
,,"void SetMusicVolume(Music music, float volume);",TODO,,Set volume for music (1.0 is max level)
,,"void SetMusicPitch(Music music, float pitch);",TODO,,Set pitch for a music (1.0 is base level)
,,float GetMusicTimeLength(Music music);,TODO,,Get music time length (in seconds)
,,float GetMusicTimePlayed(Music music);,TODO,,Get current music time played (in seconds)
,,,,,
,,AudioStream management functions,,,
,,"AudioStream InitAudioStream(unsigned int sampleRate, unsigned int sampleSize, unsigned int channels);",TODO,,Init audio stream (to stream raw audio pcm data)
,,"void UpdateAudioStream(AudioStream stream, const void *data, int samplesCount);",TODO,,Update audio stream buffers with data
,,void CloseAudioStream(AudioStream stream);,TODO,,Close audio stream and free memory
,,bool IsAudioStreamProcessed(AudioStream stream);,TODO,,Check if any audio stream buffers requires refill
,,void PlayAudioStream(AudioStream stream);,TODO,,Play audio stream
,,void PauseAudioStream(AudioStream stream);,TODO,,Pause audio stream
,,void ResumeAudioStream(AudioStream stream);,TODO,,Resume audio stream
,,bool IsAudioStreamPlaying(AudioStream stream);,TODO,,Check if audio stream is playing
,,void StopAudioStream(AudioStream stream);,TODO,,Stop audio stream
,,"void SetAudioStreamVolume(AudioStream stream, float volume);",TODO,,Set volume for audio stream (1.0 is max level)
,,"void SetAudioStreamPitch(AudioStream stream, float pitch);",TODO,,Set pitch for audio stream (1.0 is base level)
,,void SetAudioStreamBufferSizeDefault(int size);,TODO,,Default size for new audio streams
